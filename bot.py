import json
import os
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters
from apscheduler.schedulers.background import BackgroundScheduler
from uuid import uuid4

DATA_FILE = "data.json"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def load_data():
    if not os.path.exists(DATA_FILE):
        return []
    with open(DATA_FILE, "r") as file:
        try:
            return json.load(file)
        except json.JSONDecodeError:
            return []

def save_data(data):
    with open(DATA_FILE, "w") as file:
        json.dump(data, file, indent=4)

def send_reminder(context: CallbackContext, chat_id, message):
    context.bot.send_message(chat_id=chat_id, text=message)

def check_reminders(context: CallbackContext):
    now = datetime.now()
    data = load_data()
    for item in data:
        reminder_day = int(item["day"])
        chat_id = item["chat_id"]
        message = item["message"]
        id_ = item["id"]

        # T·∫°o ng√†y th√°ng hi·ªán t·∫°i v·ªõi ng√†y nh·∫Øc
        try:
            this_month = now.replace(day=reminder_day, hour=8, minute=0, second=0, microsecond=0)
        except ValueError:
            # Ng√†y kh√¥ng h·ª£p l·ªá v·ªõi th√°ng hi·ªán t·∫°i
            continue

        diff_days = (this_month.date() - now.date()).days
        if diff_days == 2:
            send_reminder(context, chat_id, f"‚è∞ C√≤n 2 ng√†y ƒë·ªÉ thanh to√°n: {message}")
        elif diff_days == 1:
            send_reminder(context, chat_id, f"‚è∞ C√≤n 1 ng√†y ƒë·ªÉ thanh to√°n: {message}")
        elif diff_days == 0 and now.hour == 8:
            send_reminder(context, chat_id, f"üö® G·∫§P! Thanh to√°n ngay: {message}")

def add_reminder(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    print(f"üìå Chat ID: {chat_id}")  # ‚úÖ In ra chat_id khi d√πng /add

    args = context.args
    if len(args) < 2:
        update.message.reply_text("‚ùå C√∫ ph√°p sai. D√πng: /add [ng√†y] [n·ªôi dung nh·∫Øc]")
        return
    day = args[0]
    if not day.isdigit() or not (1 <= int(day) <= 31):
        update.message.reply_text("‚ùå Ng√†y ph·∫£i t·ª´ 1 ƒë·∫øn 31.")
        return
    message = " ".join(args[1:])
    data = load_data()
    new_id = len(data) + 1
    data.append({
        "id": new_id,
        "day": int(day),
        "message": message,
        "chat_id": chat_id
    })
    save_data(data)
    update.message.reply_text(f"‚úÖ ƒê√£ th√™m l·ªùi nh·∫Øc ID {new_id}: Ng√†y {day} - {message}")

def list_reminders(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    data = load_data()
    reminders = [r for r in data if r["chat_id"] == chat_id]
    if not reminders:
        update.message.reply_text("üì≠ Kh√¥ng c√≥ l·ªùi nh·∫Øc n√†o.")
        return
    msg = "üìã Danh s√°ch l·ªùi nh·∫Øc:\n"
    for r in reminders:
        msg += f"üîπ ID {r['id']}: Ng√†y {r['day']} - {r['message']}\n"
    update.message.reply_text(msg)

def remove_reminder(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    args = context.args
    if len(args) != 1 or not args[0].isdigit():
        update.message.reply_text("‚ùå D√πng: /remove [id]")
        return
    rem_id = int(args[0])
    data = load_data()
    new_data = [r for r in data if not (r["id"] == rem_id and r["chat_id"] == chat_id)]
    if len(data) == len(new_data):
        update.message.reply_text("‚ùå Kh√¥ng t√¨m th·∫•y ID.")
    else:
        save_data(new_data)
        update.message.reply_text(f"üóëÔ∏è ƒê√£ x√≥a l·ªùi nh·∫Øc ID {rem_id}.")

def start(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    print(f"üëã /start t·ª´ chat_id: {chat_id}")  # ‚úÖ In ra chat_id khi b·∫Øt ƒë·∫ßu
    update.message.reply_text("ü§ñ Bot ƒëang ch·∫°y! D√πng /add [ng√†y] [n·ªôi dung] ƒë·ªÉ th√™m l·ªùi nh·∫Øc.")

def main():
    TOKEN = os.getenv("BOT_TOKEN") or "YOUR_TELEGRAM_BOT_TOKEN"
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("add", add_reminder))
    dp.add_handler(CommandHandler("list", list_reminders))
    dp.add_handler(CommandHandler("remove", remove_reminder))

    # N·∫øu mu·ªën in chat_id b·∫•t k·ª≥ tin nh·∫Øn n√†o:
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, lambda u, c: print(f"üì® Tin nh·∫Øn t·ª´ chat_id: {u.message.chat_id}")))

    scheduler = BackgroundScheduler()
    scheduler.add_job(lambda: check_reminders(updater.bot), "interval", hours=1)
    scheduler.start()

    print("‚öôÔ∏è Bot ƒëang ch·∫°y...")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
