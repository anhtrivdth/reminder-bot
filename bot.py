import json
import logging
import os
from datetime import datetime, timedelta
import pytz
from uuid import uuid4

from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes
)

# C·∫•u h√¨nh Logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# Kh·ªüi t·∫°o Scheduler
timezone = pytz.timezone("Asia/Ho_Chi_Minh")
scheduler = BackgroundScheduler(timezone=timezone)
scheduler.start()

# File JSON l∆∞u l·ªùi nh·∫Øc
DATA_FILE = "reminders.json"

# ƒê·ªçc d·ªØ li·ªáu t·ª´ file
def load_reminders():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'w') as f:
            json.dump([], f)
    with open(DATA_FILE, 'r') as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return []

# Ghi d·ªØ li·ªáu v√†o file
def save_reminders(reminders):
    with open(DATA_FILE, 'w') as f:
        json.dump(reminders, f, indent=4)

# G·ª≠i tin nh·∫Øn
async def send_message(context: ContextTypes.DEFAULT_TYPE, chat_id, text):
    try:
        await context.bot.send_message(chat_id=chat_id, text=text)
    except Exception as e:
        logging.error(f"G·ª≠i l·ªói: {e}")

# T·∫°o c√°c job g·ª≠i nh·∫Øc nh·ªü
def schedule_reminder_jobs(application, reminder):
    chat_id = reminder['chat_id']
    day = int(reminder['day'])
    text = reminder['text']
    reminder_id = reminder['id']

    for offset, label in [(-2, "c√≤n 2 ng√†y ƒë·ªÉ thanh to√°n:"),
                          (-1, "c√≤n 1 ng√†y ƒë·ªÉ thanh to√°n:"),
                          (0, "G·∫§P! Thanh to√°n ngay:")]:
        run_day = (day + offset - 1) % 31 + 1
        scheduler.add_job(
            lambda: application.create_task(send_message(application.bot, chat_id, f"{label} {text}")),
            CronTrigger(day=run_day, hour=8, minute=0, timezone=timezone),
            id=f"{reminder_id}_{offset}",
            replace_existing=True
        )

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üü¢ Bot ƒëang ch·∫°y...\nG√µ /add [ng√†y] [n·ªôi dung] ƒë·ªÉ th√™m l·ªùi nh·∫Øc.")

# /chatid
async def chatid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üÜî Chat ID c·ªßa b·∫°n l√†: `{update.effective_chat.id}`", parse_mode='Markdown')

# /add
async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        parts = update.message.text.split(' ', 2)
        if len(parts) < 3:
            await update.message.reply_text("‚ö†Ô∏è Sai c√∫ ph√°p. D√πng: /add [ng√†y] [n·ªôi dung]")
            return

        day = int(parts[1])
        if not (1 <= day <= 31):
            await update.message.reply_text("‚ö†Ô∏è Ng√†y ph·∫£i n·∫±m trong kho·∫£ng t·ª´ 1 ƒë·∫øn 31.")
            return

        text = parts[2]
        chat_id = update.effective_chat.id
        reminders = load_reminders()
        reminder_id = len(reminders) + 1

        new_reminder = {
            "id": reminder_id,
            "chat_id": chat_id,
            "day": day,
            "text": text
        }

        reminders.append(new_reminder)
        save_reminders(reminders)
        schedule_reminder_jobs(context.application, new_reminder)

        await update.message.reply_text(f"‚úÖ ƒê√£ th√™m l·ªùi nh·∫Øc ID {reminder_id}: Ng√†y {day} - {text}")

    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói: {e}")

# /list
async def list_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reminders = load_reminders()
    chat_id = update.effective_chat.id
    filtered = [r for r in reminders if r['chat_id'] == chat_id]

    if not filtered:
        await update.message.reply_text("üì≠ Kh√¥ng c√≥ l·ªùi nh·∫Øc n√†o.")
        return

    msg = "üìã Danh s√°ch l·ªùi nh·∫Øc:\n"
    for r in filtered:
        msg += f"üî∑ ID {r['id']}: Ng√†y {r['day']} - {r['text']}\n"
    await update.message.reply_text(msg)

# /remove
async def remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        parts = update.message.text.split(' ', 1)
        if len(parts) < 2:
            await update.message.reply_text("‚ö†Ô∏è D√πng: /remove [ID]")
            return

        remove_id = int(parts[1])
        reminders = load_reminders()
        new_reminders = [r for r in reminders if r['id'] != remove_id]
        if len(new_reminders) == len(reminders):
            await update.message.reply_text("‚ùå Kh√¥ng t√¨m th·∫•y ID.")
            return

        # X√≥a jobs
        for offset in [-2, -1, 0]:
            job_id = f"{remove_id}_{offset}"
            if scheduler.get_job(job_id):
                scheduler.remove_job(job_id)

        save_reminders(new_reminders)
        await update.message.reply_text(f"üóëÔ∏è ƒê√£ x√≥a l·ªùi nh·∫Øc ID {remove_id}.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói: {e}")

# Main
def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("chatid", chatid))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("list", list_reminders))
    app.add_handler(CommandHandler("remove", remove))

    # L·∫≠p l·ªãch nh·∫Øc cho l·ªùi nh·∫Øc ƒë√£ l∆∞u
    for r in load_reminders():
        schedule_reminder_jobs(app, r)

    print("ü§ñ Bot ƒëang ch·∫°y...")
    app.run_polling()

if __name__ == "__main__":
    main()
