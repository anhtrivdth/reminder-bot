import os
import json
from datetime import datetime, date
from telegram.ext import Updater, CommandHandler
import threading
import time

# üîê Telegram Token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
TOKEN = os.environ.get("TELEGRAM_TOKEN")
DATA_FILE = "data.json"

# üì¶ Load ho·∫∑c t·∫°o d·ªØ li·ªáu n·∫øu ch∆∞a c√≥
def load_reminders():
    if not os.path.exists(DATA_FILE) or os.stat(DATA_FILE).st_size == 0:
        with open(DATA_FILE, "w") as f:
            json.dump([], f)
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_reminders(reminders):
    with open(DATA_FILE, "w") as f:
        json.dump(reminders, f, indent=2)

# ‚ûï /add [ng√†y] [n·ªôi dung]
def add(update, context):
    args = context.args
    if len(args) < 2:
        update.message.reply_text("‚ùå D√πng: /add [ng√†y] [n·ªôi dung nh·∫Øc]")
        return
    try:
        day = int(args[0])
        if not 1 <= day <= 31:
            update.message.reply_text("‚ùå Ng√†y ph·∫£i t·ª´ 1 ƒë·∫øn 31.")
            return
    except:
        update.message.reply_text("‚ùå Ng√†y kh√¥ng h·ª£p l·ªá.")
        return

    text = " ".join(args[1:])
    reminders = load_reminders()
    new_id = max([r["id"] for r in reminders], default=0) + 1
    reminders.append({
        "id": new_id,
        "day": day,
        "text": text,
        "chat_id": update.message.chat_id
    })
    save_reminders(reminders)
    update.message.reply_text(f"‚úÖ ƒê√£ l∆∞u nh·∫Øc: ng√†y {day} - {text}")

# üìã /list
def list_reminders(update, context):
    chat_id = update.message.chat_id
    reminders = load_reminders()
    user_reminders = [r for r in reminders if r["chat_id"] == chat_id]
    if not user_reminders:
        update.message.reply_text("üì≠ B·∫°n ch∆∞a c√≥ l·ªùi nh·∫Øc n√†o.")
        return
    reply = "üìã Danh s√°ch l·ªùi nh·∫Øc:\n"
    for r in user_reminders:
        reply += f"üî∏ ID {r['id']}: Ng√†y {r['day']} - {r['text']}\n"
    update.message.reply_text(reply)

# ‚ùå /remove [id]
def remove_reminder(update, context):
    args = context.args
    if len(args) != 1:
        update.message.reply_text("‚ùå D√πng: /remove [id]")
        return
    try:
        rid = int(args[0])
    except:
        update.message.reply_text("‚ùå ID ph·∫£i l√† s·ªë.")
        return

    reminders = load_reminders()
    new_reminders = [r for r in reminders if r["id"] != rid or r["chat_id"] != update.message.chat_id]
    if len(new_reminders) == len(reminders):
        update.message.reply_text("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ID ƒë√≥.")
    else:
        save_reminders(new_reminders)
        update.message.reply_text(f"‚úÖ ƒê√£ x√≥a l·ªùi nh·∫Øc ID {rid}")

# ‚è∞ Ki·ªÉm tra v√† g·ª≠i l·ªùi nh·∫Øc (m·ªói s√°ng 8h)
def check_and_send_reminders():
    today = date.today()
    reminders = load_reminders()
    for r in reminders:
        chat_id = r["chat_id"]
        text = r["text"]
        reminder_day = int(r["day"])
        try:
            reminder_date = date(today.year, today.month, reminder_day)
        except:
            continue  # v√≠ d·ª•: 31/2 kh√¥ng t·ªìn t·∫°i

        delta = (reminder_date - today).days

        if delta == 2:
            bot.send_message(chat_id, f"‚è∞ C√≤n 2 ng√†y ƒë·ªÉ thanh to√°n: {text}")
        elif delta == 1:
            bot.send_message(chat_id, f"‚ö†Ô∏è C√≤n 1 ng√†y ƒë·ªÉ thanh to√°n: {text}")
        elif delta == 0:
            bot.send_message(chat_id, f"üö® G·∫•p! Thanh to√°n ngay: {text}")

# üîÅ Thread ch·∫°y nh·∫Øc l√∫c 8:00 m·ªói ng√†y
def run_scheduler():
    while True:
        now = datetime.now()
        if now.hour == 8 and now.minute == 0:
            check_and_send_reminders()
            time.sleep(60)  # tr√°nh l·∫∑p trong c√πng ph√∫t
        time.sleep(20)

# üöÄ Kh·ªüi t·∫°o bot
updater = Updater(token=TOKEN, use_context=True)
dp = updater.dispatcher

dp.add_handler(CommandHandler("add", add))
dp.add_handler(CommandHandler("list", list_reminders))
dp.add_handler(CommandHandler("remove", remove_reminder))

bot = updater.bot

threading.Thread(target=run_scheduler, daemon=True).start()

print("ü§ñ Bot ƒëang ch·∫°y...")
updater.start_polling()
updater.idle()
